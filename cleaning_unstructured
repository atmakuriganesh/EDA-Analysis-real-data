# Create a new dictionary for transformed dataframes
transformed_dataframes = {}

for key, df in dataframes_1.items():
    # Find the row with header information
    header_row_idx = None
    for idx, row in df.iterrows():
        row_values = [str(val).upper() if not pd.isna(val) else "" for val in row.values]
        if ('OLD GRADE' in row_values or 'OLD' in row_values) and \
           ('STEP' in row_values):
            header_row_idx = idx
            break
    
    if header_row_idx is not None:
        # Get header values
        headers = df.iloc[header_row_idx].values
        
        # Find column positions for each target column
        old_grade_idx = None
        current_grade_idx = None
        step_idx = None
        annual_idx = None
        
        for i, val in enumerate(headers):
            val_str = str(val).upper() if not pd.isna(val) else ""
            if 'OLD GRADE' in val_str or val_str == 'OLD':
                old_grade_idx = i
            elif 'CURRENT GRADE' in val_str or val_str == 'CURRENT':
                current_grade_idx = i
            elif val_str == 'STEP':
                step_idx = i
            elif 'ANNUAL' in val_str:
                annual_idx = i  # Last occurrence will be kept
        
        # Create a new DataFrame with just the columns we want
        result_df = pd.DataFrame(columns=['OLD GRADE', 'CURRENT GRADE', 'STEP', 'ANNUAL', 'category'])
        
        # Process each data row
        for i in range(header_row_idx + 1, len(df)):
            row = df.iloc[i]
            
            # Skip completely empty rows
            if row.isna().all():
                continue
            
            # Create a new row with just our desired columns
            new_row = {'category': key}
            
            if old_grade_idx is not None and old_grade_idx < len(row):
                new_row['OLD GRADE'] = row.iloc[old_grade_idx]
                
            if current_grade_idx is not None and current_grade_idx < len(row):
                new_row['CURRENT GRADE'] = row.iloc[current_grade_idx]
                
            if step_idx is not None and step_idx < len(row):
                new_row['STEP'] = row.iloc[step_idx]
                
            if annual_idx is not None and annual_idx < len(row):
                new_row['ANNUAL'] = row.iloc[annual_idx]
            
            # Add to result DataFrame
            result_df = pd.concat([result_df, pd.DataFrame([new_row])], ignore_index=True)
        
        transformed_dataframes[key] = result_df
    else:
        # If no header row found, create an empty dataframe
        transformed_dataframes[key] = pd.DataFrame(columns=['OLD GRADE', 'CURRENT GRADE', 'STEP', 'ANNUAL', 'category'])

# Replace original dataframes with transformed ones
dataframes_1 = transformed_dataframes
