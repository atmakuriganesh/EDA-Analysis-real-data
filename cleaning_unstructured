# Create a new dictionary for transformed dataframes
transformed_dataframes = {}

for key, df in dataframes_1.items():
    # Create a new empty dataframe with our desired columns
    new_df = pd.DataFrame(columns=['OLD GRADE', 'CURRENT GRADE', 'STEP', 'ANNUAL', 'category'])
    
    # Find the row with 'OLD GRADE' or 'OLD' value
    old_grade_idx = None
    for idx, row in df.iterrows():
        for val in row.values:
            if isinstance(val, str) and ('OLD GRADE' in val or val == 'OLD'):
                old_grade_idx = idx
                break
        if old_grade_idx is not None:
            break
    
    if old_grade_idx is not None:
        # We found the header row
        header_row = df.iloc[old_grade_idx]
        
        # Find the column indexes for each of our target columns
        old_grade_col_idx = None
        current_grade_col_idx = None
        step_col_idx = None
        annual_col_idx = None
        
        for i, val in enumerate(header_row):
            if isinstance(val, str):
                if 'OLD GRADE' in val or val == 'OLD':
                    old_grade_col_idx = i
                elif 'CURRENT GRADE' in val or val == 'CURRENT':
                    current_grade_col_idx = i
                elif val == 'STEP':
                    step_col_idx = i
                elif 'ANNUAL' in val:
                    annual_col_idx = i  # Keep updating to get the last one
        
        # Extract data from rows below the header
        for idx in range(old_grade_idx + 1, len(df)):
            row = df.iloc[idx]
            
            # Skip rows with all NaN values
            if row.isna().all():
                continue
                
            new_row = {}
            if old_grade_col_idx is not None:
                new_row['OLD GRADE'] = row.iloc[old_grade_col_idx]
            if current_grade_col_idx is not None:
                new_row['CURRENT GRADE'] = row.iloc[current_grade_col_idx]
            if step_col_idx is not None:
                new_row['STEP'] = row.iloc[step_col_idx]
            if annual_col_idx is not None:
                new_row['ANNUAL'] = row.iloc[annual_col_idx]
                
            new_row['category'] = key
            
            # Append to our new dataframe
            new_df = pd.concat([new_df, pd.DataFrame([new_row])], ignore_index=True)
    
    # Store the transformed dataframe
    transformed_dataframes[key] = new_df

# Replace original dataframes with transformed ones
dataframes_1 = transformed_dataframes

# Check the output
for key, df in dataframes_1.items():
    print(f"\nDataframe: {key}")
    print(f"Shape: {df.shape}")
    print(df.head(3))
