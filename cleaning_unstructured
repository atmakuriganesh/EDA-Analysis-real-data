import pandas as pd
import numpy as np

# Create a new dictionary for transformed dataframes
transformed_dataframes = {}

for key, df in dataframes_1.items():
    # Convert to numpy array for easier manipulation
    array_data = df.values
    
    # Find the row containing 'OLD GRADE' or 'STEP'
    header_row = -1
    for i, row in enumerate(array_data):
        row_as_str = [str(x).upper() for x in row if not pd.isna(x)]
        if 'OLD GRADE' in row_as_str and 'STEP' in row_as_str:
            header_row = i
            break
    
    if header_row >= 0:
        # Find column positions for each target field
        cols = {}
        for j, val in enumerate(array_data[header_row]):
            if pd.isna(val):
                continue
                
            val_str = str(val).upper()
            if val_str == 'OLD GRADE':
                cols['OLD GRADE'] = j
            elif val_str == 'CURRENT GRADE':
                cols['CURRENT GRADE'] = j
            elif val_str == 'STEP':
                cols['STEP'] = j
            elif val_str == 'ANNUAL':
                cols['ANNUAL'] = j  # Will keep the last one
        
        # Create a new dataframe
        result = []
        
        # Extract data from rows after the header
        for i in range(header_row + 1, len(array_data)):
            row = array_data[i]
            
            # Skip if all values are NaN
            if all(pd.isna(x) for x in row):
                continue
            
            row_data = {'category': key}
            for col_name, j in cols.items():
                if j < len(row):
                    row_data[col_name] = row[j]
            
            result.append(row_data)
        
        # Create the final dataframe
        if result:
            transformed_dataframes[key] = pd.DataFrame(result)
        else:
            transformed_dataframes[key] = pd.DataFrame(columns=['OLD GRADE', 'CURRENT GRADE', 'STEP', 'ANNUAL', 'category'])
    else:
        # No header found
        transformed_dataframes[key] = pd.DataFrame(columns=['OLD GRADE', 'CURRENT GRADE', 'STEP', 'ANNUAL', 'category'])

# Replace original dataframes
dataframes_1 = transformed_dataframes

# Print a sample to verify
key = list(dataframes_1.keys())[0]
print(f"Transformed dataframe: {key}")
print(dataframes_1[key].head())
