import pandas as pd
import re
from datetime import datetime

def extract_rg_data(df_input, category_name="RG Pay Structure", target_year=2023):
    """
    Extract RG data from a DataFrame.
    
    Parameters:
    df_input (pandas.DataFrame): Input DataFrame
    category_name (str): Name to use for the category column
    target_year (int): Year to filter data for (default: 2023)
    
    Returns:
    pandas.DataFrame: DataFrame with grade, term, end_rate and category columns
    """
    # Reset index to ensure we have consistent row numbering
    df_raw = df_input.reset_index(drop=True)
    
    # Convert DataFrame to have no headers for consistent processing
    if df_raw.columns.dtype != 'int64':
        # If it has named headers, convert to a headerless DataFrame
        df_raw = pd.DataFrame(df_raw.values)
    
    data = []
    date_pattern = re.compile(r'(\d{1,2}/\d{1,2}/\d{2,4})')
    
    # Scan through the dataframe to find dates and corresponding RG1/RG2 rows
    for i in range(df_raw.shape[0]):
        if df_raw.shape[1] > 0:  # Ensure there's at least one column
            date_cell = str(df_raw.iloc[i, 0])
            date_match = date_pattern.search(date_cell)
            
            if date_match:
                date_str = date_match.group(1)
                try:
                    # Parse the date to check if it's from target year
                    date_obj = pd.to_datetime(date_str)
                    
                    # Only process rows with the target year (default 2023)
                    if date_obj.year == target_year:
                        # Look for RG1 and RG2 in this row and subsequent row
                        for j in range(2):  # Check current row and next row
                            if i+j < df_raw.shape[0] and df_raw.shape[1] > 3:
                                grade_cell = str(df_raw.iloc[i+j, 1]).strip()
                                
                                if grade_cell in ['RG1', 'RG2']:
                                    # Get hourly rate from the hourly column (assumed to be column 3)
                                    hourly_str = str(df_raw.iloc[i+j, 3])
                                    
                                    try:
                                        # Remove any $ and convert to float
                                        hourly_rate = float(hourly_str.replace('$', '').replace(',', ''))
                                        
                                        # Calculate annual rate
                                        annual_rate = hourly_rate * 2080
                                        
                                        data.append({
                                            'grade': grade_cell,
                                            'term': 'annual',
                                            'end_rate': round(annual_rate, 2),
                                            'category': category_name
                                        })
                                    except ValueError:
                                        # Skip if hourly rate can't be converted to float
                                        continue
                except:
                    # If date parsing fails, continue to next row
                    continue
    
    result_df = pd.DataFrame(data)
    # Drop any rows with NaN end_rates
    result_df = result_df.dropna(subset=['end_rate'])
    
    return result_df

# Example usage
# Instead of file_path, you would use:
# df_result = extract_rg_data(df['as'], "Chicago Newspaper Guild")
