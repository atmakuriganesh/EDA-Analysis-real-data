import pandas as pd
import numpy as np

# Create a new dictionary to store the transformed dataframes
transformed_dataframes = {}

for key, df in dataframes_1.items():
    # Make a copy to avoid modifying the original
    temp_df = df.copy()
    
    # Find the row that contains our header labels
    header_row_idx = None
    for idx, row in temp_df.iterrows():
        # Convert row values to strings for comparison
        row_values = [str(val).upper() for val in row.values]
        
        # Check if this row contains our target headers
        if ('OLD GRADE' in row_values or 'OLD' in row_values) and \
           ('CURRENT GRADE' in row_values or 'CURRENT' in row_values) and \
           'STEP' in row_values:
            header_row_idx = idx
            break
    
    if header_row_idx is not None:
        # Use the identified row as headers
        headers = temp_df.iloc[header_row_idx].values
        
        # Get data rows (everything after the header row)
        data_rows = temp_df.iloc[header_row_idx+1:].values
        
        # Create new dataframe with proper column names
        new_df = pd.DataFrame(data_rows, columns=headers)
        
        # Find the columns we want to keep
        old_grade_col = None
        current_grade_col = None
        step_col = None
        annual_cols = []
        
        for col in new_df.columns:
            col_str = str(col).upper()
            if 'OLD GRADE' in col_str or col_str == 'OLD':
                old_grade_col = col
            elif 'CURRENT GRADE' in col_str or col_str == 'CURRENT':
                current_grade_col = col
            elif col_str == 'STEP':
                step_col = col
            elif 'ANNUAL' in col_str:
                annual_cols.append(col)
        
        # Add category column
        new_df['category'] = key
        
        # Create a new dataframe with only the columns we want
        cols_to_keep = []
        if old_grade_col:
            cols_to_keep.append(old_grade_col)
        if current_grade_col:
            cols_to_keep.append(current_grade_col)
        if step_col:
            cols_to_keep.append(step_col)
        if annual_cols:
            cols_to_keep.append(annual_cols[-1])  # Only keep the last ANNUAL column
        cols_to_keep.append('category')
        
        # Select only the columns we want
        final_df = new_df[cols_to_keep]
        
        # Remove rows with all NaN values
        final_df = final_df.dropna(how='all')
        
        # Store in new dictionary
        transformed_dataframes[key] = final_df
    else:
        # If no header row found, create an empty dataframe with the required columns
        transformed_dataframes[key] = pd.DataFrame(columns=['OLD GRADE', 'CURRENT GRADE', 'STEP', 'ANNUAL', 'category'])

# Replace original dataframes dictionary with transformed ones
dataframes_1 = transformed_dataframes
