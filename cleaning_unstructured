import pandas as pd
import re
from datetime import datetime

def extract_rg_data(df_input, category_name="RG Pay Structure", target_year=2023):
    """
    Extract RG data from a DataFrame, handling MM/DD/YYYY date format.
    
    Parameters:
    df_input (pandas.DataFrame): Input DataFrame
    category_name (str): Name to use for the category column
    target_year (int): Year to filter data for (default: 2023)
    
    Returns:
    pandas.DataFrame: DataFrame with grade, term, end_rate and category columns
    """
    # Reset index and ensure consistent format
    df_raw = df_input.reset_index(drop=True)
    if df_raw.columns.dtype != 'int64':
        df_raw = pd.DataFrame(df_raw.values)
    
    print(f"DataFrame shape: {df_raw.shape}")
    print("Looking for year:", target_year)
    
    data = []
    # Standard date pattern looking for formats like 6/1/2023
    date_pattern = re.compile(r'(\d{1,2}/\d{1,2}/\d{4})')
    
    # Scan through the dataframe
    for i in range(df_raw.shape[0]):
        if df_raw.shape[1] > 0:
            # Get the value in the first column
            date_cell = str(df_raw.iloc[i, 0]).strip()
            print(f"Row {i}, Col 0: '{date_cell}'")
            
            # Try to match the date pattern
            date_match = date_pattern.search(date_cell)
            
            if date_match:
                date_str = date_match.group(1)
                print(f"Found date: {date_str} in row {i}")
                
                try:
                    # Parse the date explicitly as MM/DD/YYYY
                    try:
                        date_parts = date_str.split('/')
                        month = int(date_parts[0])
                        day = int(date_parts[1])
                        year = int(date_parts[2])
                        print(f"  Parsed: month={month}, day={day}, year={year}")
                    except:
                        # If direct parsing fails, try pandas
                        date_obj = pd.to_datetime(date_str)
                        year = date_obj.year
                        print(f"  Parsed with pandas: year={year}")
                    
                    # Check if this is the target year
                    if year == target_year:
                        print(f"  ✓ MATCH: Found target year {target_year}")
                        
                        # Look for RG1/RG2 in current row and next row
                        for j in range(2):
                            row_idx = i+j
                            if row_idx < df_raw.shape[0]:
                                # Check column 1 for grade
                                grade_cell = str(df_raw.iloc[row_idx, 1]).strip()
                                print(f"  Checking grade in row {row_idx}: '{grade_cell}'")
                                
                                if grade_cell in ['RG1', 'RG2']:
                                    print(f"    ✓ MATCH: Found grade {grade_cell}")
                                    
                                    # Find hourly rate - should be in column 3 or 4
                                    hourly_col = None
                                    for col_idx in range(2, min(5, df_raw.shape[1])):
                                        col_header = str(df_raw.iloc[row_idx, col_idx-1]).strip()
                                        if col_header.lower() == 'hourly':
                                            hourly_col = col_idx
                                            break
                                    
                                    # If we couldn't find the hourly column header, default to column 3
                                    if hourly_col is None:
                                        hourly_col = 3
                                    
                                    if hourly_col < df_raw.shape[1]:
                                        hourly_str = str(df_raw.iloc[row_idx, hourly_col])
                                        print(f"    Hourly value from column {hourly_col}: '{hourly_str}'")
                                        
                                        try:
                                            # Clean and convert to float
                                            hourly_str = hourly_str.replace('$', '').replace(',', '')
                                            hourly_rate = float(hourly_str)
                                            annual_rate = hourly_rate * 2080
                                            
                                            print(f"    Calculated annual rate: {annual_rate}")
                                            
                                            data.append({
                                                'grade': grade_cell,
                                                'term': 'annual',
                                                'end_rate': round(annual_rate, 2),
                                                'category': category_name
                                            })
                                        except ValueError as e:
                                            print(f"    ✗ ERROR: Could not convert hourly rate: {e}")
                except Exception as e:
                    print(f"  ✗ ERROR processing row {i}: {e}")
    
    print(f"\nSummary:")
    print(f"- Total records extracted: {len(data)}")
    
    result_df = pd.DataFrame(data)
    return result_df

# Example usage:
# df_result = extract_rg_data(df['as'], "IN-HOUSE REGISTRY NURSES AND SPECIALTY CARE")
