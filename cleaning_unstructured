import pandas as pd
import numpy as np

# Create a new dictionary to store the transformed dataframes
transformed_dataframes = {}

for key, df in dataframes_1.items():
    # Make a copy to avoid modifying the original
    temp_df = df.copy()
    
    # Find the row index that contains "OLD GRADE", "CURRENT GRADE", "STEP", "ANNUAL"
    header_indices = []
    for i, row in temp_df.iterrows():
        if row.astype(str).str.contains('OLD GRADE').any() or \
           row.astype(str).str.contains('CURRENT GRADE').any() or \
           row.astype(str).str.contains('STEP').any() or \
           row.astype(str).str.contains('ANNUAL').any():
            header_indices.append(i)
    
    if header_indices:
        # Get the lowest index as the header row
        header_row = min(header_indices)
        
        # Get headers from the header row
        headers = temp_df.iloc[header_row].values
        
        # Get data rows (everything after the header row)
        data_rows = temp_df.iloc[header_row+1:].values
        
        # Create new dataframe with raw headers and data
        new_df = pd.DataFrame(data_rows, columns=headers)
        
        # Handle duplicate 'ANNUAL' columns - keep only the last one
        # First get column positions where 'ANNUAL' appears
        annual_cols = [i for i, header in enumerate(headers) if str(header) == 'ANNUAL']
        
        # If multiple ANNUAL columns exist, keep only the last one
        if len(annual_cols) > 1:
            cols_to_drop = annual_cols[:-1]  # All except the last one
            new_df = new_df.drop(new_df.columns[cols_to_drop], axis=1)
        
        # Add category column with the dataframe name
        new_df['category'] = key
        
        # Remove rows with all NaN values
        new_df = new_df.dropna(how='all')
        
        # Store in new dictionary
        transformed_dataframes[key] = new_df
    else:
        # If no header row found, just add the category and remove all-NaN rows
        temp_df['category'] = key
        temp_df = temp_df.dropna(how='all')
        transformed_dataframes[key] = temp_df

# Replace original dataframes dictionary with transformed one if needed
dataframes_1 = transformed_dataframes
