import pandas as pd
import re

def extract_rxg_data(df_input, category_name=None):
    """
    Extract RXG data from a DataFrame focusing only on 6/1/2023 date format.
    
    Parameters:
    df_input (pandas.DataFrame): Input DataFrame
    category_name (str): Name to use for the category column
    
    Returns:
    pandas.DataFrame: DataFrame with grade, term, end_rate and category columns
    """
    # Reset index and ensure consistent format
    df_raw = df_input.reset_index(drop=True)
    
    # If no category name provided, use default
    if not category_name:
        category_name = "RXG Pay Structure"
    
    print(f"Using category: {category_name}")
    print(f"DataFrame shape: {df_raw.shape}")
    
    data = []
    # Only looking for exact 6/1/2023 format
    date_pattern = r'6/1/2023'
    
    # Scan the dataframe for cells containing 6/1/2023
    for i in range(df_raw.shape[0]):
        for j in range(min(5, df_raw.shape[1])):
            if j < df_raw.shape[1]:
                cell_value = str(df_raw.iloc[i, j])
                
                # Check for exact 6/1/2023 pattern
                if re.search(date_pattern, cell_value):
                    print(f"Found date '6/1/2023' in row {i}, col {j}")
                    
                    # Look for RXG in the same row or previous row
                    grade = None
                    for k in range(min(3, df_raw.shape[1])):
                        if k < df_raw.shape[1]:
                            col_value = str(df_raw.iloc[i, k])
                            if "RXG" in col_value:
                                grade = "RXG"
                                print(f"Found grade '{grade}' in row {i}, col {k}")
                                break
                    
                    # Check previous row if grade not found
                    if not grade and i > 0:
                        for k in range(min(3, df_raw.shape[1])):
                            if k < df_raw.shape[1]:
                                col_value = str(df_raw.iloc[i-1, k])
                                if "RXG" in col_value:
                                    grade = "RXG"
                                    print(f"Found grade '{grade}' in row {i-1}, col {k}")
                                    break
                    
                    # Default to RXG if not found but we have the date
                    if not grade:
                        grade = "RXG"
                        print(f"Using default grade 'RXG' for date in row {i}")
                    
                    # Look for "Annual" in the next 2-3 rows
                    for offset in range(1, 4):
                        if i+offset < df_raw.shape[0]:
                            for k in range(min(5, df_raw.shape[1])):
                                if k < df_raw.shape[1]:
                                    col_value = str(df_raw.iloc[i+offset, k]).lower()
                                    if "annual" in col_value:
                                        print(f"Found 'Annual' in row {i+offset}, col {k}")
                                        
                                        # Look for annual value in this row
                                        for val_col in range(min(5, df_raw.shape[1])):
                                            if val_col < df_raw.shape[1] and val_col != k:
                                                val = str(df_raw.iloc[i+offset, val_col])
                                                try:
                                                    # Skip non-numeric values
                                                    val = val.replace('$', '').replace(',', '')
                                                    if val and val.strip() and val.strip() != 'nan':
                                                        annual_rate = float(val)
                                                        
                                                        data.append({
                                                            'grade': grade,
                                                            'term': 'annual',
                                                            'end_rate': round(annual_rate, 2),
                                                            'category': category_name
                                                        })
                                                        print(f"Added record: {grade}, annual, {annual_rate}, {category_name}")
                                                        return pd.DataFrame(data)  # Return immediately after finding the first match
                                                except:
                                                    pass
    
    print(f"\nTotal records found: {len(data)}")
    result_df = pd.DataFrame(data)
    
    # Drop any rows with NaN end_rates
    if not result_df.empty:
        result_df = result_df.dropna(subset=['end_rate'])
    
    return result_df

