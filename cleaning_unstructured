import pandas as pd

def extract_rg_data(df_input, category_name=None):
    """
    Extract RG data from a DataFrame, focusing on 2023 dates.
    
    Parameters:
    df_input (pandas.DataFrame): Input DataFrame
    category_name (str): Name to use for the category column
    
    Returns:
    pandas.DataFrame: DataFrame with grade, term, end_rate and category columns
    """
    # Reset index and ensure consistent format
    df_raw = df_input.reset_index(drop=True)
    
    # If no category name provided, try to extract it from the data
    if not category_name:
        for i in range(min(5, df_raw.shape[0])):
            for j in range(min(5, df_raw.shape[1])):
                cell_value = str(df_raw.iloc[i, j])
                if "REGISTRY" in cell_value.upper():
                    category_name = cell_value
                    break
        # Default if not found
        if not category_name:
            category_name = "RG Pay Structure"
    
    data = []
    target_dates = ['6/1/2023', '6/1/23', '12/1/2023', '12/1/23']
    
    # Look for target dates in column 0
    for i in range(df_raw.shape[0]):
        if df_raw.shape[1] == 0:
            continue
            
        date_cell = str(df_raw.iloc[i, 0]).strip()
        
        # Check if this cell contains a target date
        found_date = False
        if any(date_str in date_cell for date_str in target_dates):
            found_date = True
        else:
            try:
                date_obj = pd.to_datetime(date_cell, errors='raise')
                if date_obj.month in [6, 12] and date_obj.day == 1 and date_obj.year == 2023:
                    found_date = True
            except:
                pass
        
        # If we found a target date
        if found_date:
            # Check current row and next row for RG1/RG2
            for j in range(2):  # Current row and next row
                row_idx = i+j
                if row_idx >= df_raw.shape[0]:
                    continue
                    
                # Check for RG1/RG2 in column 1
                if df_raw.shape[1] > 1:
                    grade_cell = str(df_raw.iloc[row_idx, 1]).strip()
                    
                    if grade_cell in ['RG1', 'RG2']:
                        # Get hourly rate from column 3
                        if df_raw.shape[1] > 3:
                            hourly_str = str(df_raw.iloc[row_idx, 3])
                            
                            try:
                                # Clean and convert to float
                                hourly_str = hourly_str.replace('$', '').replace(',', '')
                                hourly_rate = float(hourly_str)
                                annual_rate = hourly_rate * 2080
                                
                                data.append({
                                    'grade': grade_cell,
                                    'term': 'annual',
                                    'end_rate': round(annual_rate, 2),
                                    'category': category_name
                                })
                            except ValueError:
                                pass  # Skip if can't convert
    
    result_df = pd.DataFrame(data)
    
    # Drop any rows with NaN end_rates
    if not result_df.empty:
        result_df = result_df.dropna(subset=['end_rate'])
    
    return result_df

# Example usage:
# df_result = extract_rg_data(df['as'], "IN-HOUSE REGISTRY NURSES AND SPECIALTY CARE")
