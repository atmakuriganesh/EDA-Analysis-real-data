import pandas as pd
import numpy as np

def merge_all_dataframes(dfs_list):
    """
    Merge multiple dataframes into one, preserving all columns across dataframes.
    If a dataframe is missing a column that exists in other dataframes, it will be filled with NaN.
    
    Parameters:
    -----------
    dfs_list : list
        List of pandas DataFrames to merge
    
    Returns:
    --------
    pandas.DataFrame
        A merged dataframe containing all rows and columns from input dataframes
    """
    # Check if the input list is empty
    if not dfs_list:
        return pd.DataFrame()
    
    # Get the list of all unique columns across all dataframes
    all_columns = set()
    for df in dfs_list:
        all_columns.update(df.columns)
    
    # Create a list to store the standardized dataframes
    standardized_dfs = []
    
    # Standardize each dataframe to include all columns
    for df in dfs_list:
        # Create a dict of missing columns with NaN values
        missing_cols = all_columns - set(df.columns)
        # Create a new dataframe with the missing columns filled with NaN
        if missing_cols:
            for col in missing_cols:
                df[col] = np.nan
        # Ensure all dataframes have the same column order
        standardized_dfs.append(df[sorted(all_columns)])
    
    # Concatenate all standardized dataframes
    merged_df = pd.concat(standardized_dfs, ignore_index=True)
    
    return merged_df

# Example usage:
# merged_result = merge_all_dataframes([merged_df, result_df, result_df1, result_df2])
