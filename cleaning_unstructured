import pandas as pd
import numpy as np

# Create a new dictionary to store the transformed dataframes
transformed_dataframes = {}

for key, df in dataframes_1.items():
    # Make a copy to avoid modifying the original
    temp_df = df.copy()
    
    # Find the row index that contains our target headers
    header_indices = []
    for i, row in temp_df.iterrows():
        if row.astype(str).str.contains('OLD GRADE').any() or \
           row.astype(str).str.contains('CURRENT GRADE').any() or \
           row.astype(str).str.contains('STEP').any() or \
           row.astype(str).str.contains('ANNUAL').any():
            header_indices.append(i)
    
    if header_indices:
        # Get the lowest index as the header row
        header_row = min(header_indices)
        
        # Get headers from the header row
        headers = temp_df.iloc[header_row].values
        
        # Get data rows (everything after the header row)
        data_rows = temp_df.iloc[header_row+1:].values
        
        # Create new dataframe with raw headers and data
        new_df = pd.DataFrame(data_rows, columns=headers)
        
        # Add category column if it doesn't exist
        if 'category' not in new_df.columns:
            new_df['category'] = key
        
        # Find the columns we want to keep
        cols_to_keep = []
        annual_cols = []
        
        for i, col in enumerate(new_df.columns):
            col_str = str(col)
            if col_str == 'OLD GRADE':
                cols_to_keep.append(col)
            elif col_str == 'CURRENT GRADE':
                cols_to_keep.append(col)
            elif col_str == 'STEP':
                cols_to_keep.append(col)
            elif col_str == 'ANNUAL':
                annual_cols.append(col)
        
        # Add the last ANNUAL column if it exists
        if annual_cols:
            cols_to_keep.append(annual_cols[-1])  # Add only the last ANNUAL column
        
        # Add category column
        cols_to_keep.append('category')
        
        # Keep only the columns we want
        new_df = new_df[cols_to_keep]
        
        # Remove rows with all NaN values
        new_df = new_df.dropna(how='all')
        
        # Store in new dictionary
        transformed_dataframes[key] = new_df
    else:
        # Just in case no header row is found
        transformed_dataframes[key] = pd.DataFrame()

# Replace original dataframes dictionary with transformed ones
dataframes_1 = transformed_dataframes
