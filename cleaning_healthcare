import pandas as pd

def clean_health_plan_df(df):
    # Drop the index column if it exists
    if df.index.name:
        df = df.reset_index(drop=True)
    
    # Get the column names
    columns = df.columns.tolist()
    
    # Create a new dataframe with the desired structure
    new_df = pd.DataFrame()
    
    # Keep the Feature column
    new_df['Feature'] = df[columns[0]].astype(str).str.replace(r'^\d+\s+', '', regex=True)
    
    # Keep the HMO Plan column
    new_df['HMO Plan'] = df[columns[1]].astype(str)
    
    # Rename the third column to include both Cook County and PPO In-Network
    new_df['Cook County Domestic Tier PPO Plan In-Network'] = df[columns[2]].astype(str).str.replace('\\n', ' ').str.replace('\\', '')
    
    # Rename the fourth column to PPO Plan Out-of-Network
    new_df['PPO Plan Out-of-Network'] = df[columns[4]].astype(str).str.replace('\\n', ' ').str.replace('\\', '')
    
    # Filter out any rows containing 'NOTE:' or similar
    new_df = new_df[~new_df['Feature'].str.contains('NOTE', case=False, na=False)]
    
    # Clean all cell values
    for col in new_df.columns:
        # Replace any remaining newlines with spaces
        new_df[col] = new_df[col].str.replace('\n', ' ')
        # Replace escape characters
        new_df[col] = new_df[col].str.replace('\\', '')
        # Remove <NA> values
        new_df[col] = new_df[col].str.replace('<NA>', '')
        # Remove index numbers that might be in the cells
        new_df[col] = new_df[col].str.replace(r'^\d+$', '', regex=True)
        # Trim whitespace
        new_df[col] = new_df[col].str.strip()
    
    # Replace NaN and "nan" with empty strings
    new_df = new_df.replace({'nan': '', 'NaN': '', pd.NA: ''})
    
    # Reset index for clean output
    new_df = new_df.reset_index(drop=True)
    
    return new_df

cleaned_df = clean_health_plan_df(all_tables['health_benefits_summary_1'])
cleaned_df2 = clean_health_plan_df(all_tables['health_benefits_summary_2'])
cleaned_df3 = clean_health_plan_df(all_tables['health_benefits_summary_3'])

------------------------------------





# Direct modification to add 10% coinsurance to the first two rows in the third column
cleaned_df3.loc[0, "Cook County Domestic Tier PPO Plan In-Network"] = "0% coinsurance 10% coinsurance"
cleaned_df3.loc[1, "Cook County Domestic Tier PPO Plan In-Network"] = "0% coinsurance 10% coinsurance"

# If you want to append to existing values instead of replacing:
for idx in [0, 1]:
    current_val = cleaned_df3.loc[idx, "Cook County Domestic Tier PPO Plan In-Network"]
    if pd.isna(current_val) or current_val == "":
        cleaned_df3.loc[idx, "Cook County Domestic Tier PPO Plan In-Network"] = "0% coinsurance 10% coinsurance"
    elif "10% coinsurance" not in str(current_val):
        cleaned_df3.loc[idx, "Cook County Domestic Tier PPO Plan In-Network"] += "0% coinsurance 10% coinsurance"

-----------------------------------------

# Rename columns to match the health plan table
all_tables['health_benefits_summary_4'].columns = ['Feature', 'HMO Plan', 'Cook County Domestic Tier PPO Plan In-Network', 'PPO Plan Out-of-Network']

# Copy data from Col_2 to Col_3 for rows 0 and 1
all_tables['health_benefits_summary_4'].loc[0, 'PPO Plan Out-of-Network'] = all_tables['health_benefits_summary_4'].loc[0, 'Cook County Domestic Tier PPO Plan In-Network']
all_tables['health_benefits_summary_4'].loc[1, 'PPO Plan Out-of-Network'] = all_tables['health_benefits_summary_4'].loc[1, 'Cook County Domestic Tier PPO Plan In-Network']

# Remove \n from all cells
for col in all_tables['health_benefits_summary_4'].columns:
    all_tables['health_benefits_summary_4'][col] = all_tables['health_benefits_summary_4'][col].astype(str).str.replace('\n', ' ').str.replace('\\n', ' ')
-----------------------------------------------

cleaned_df4 = all_tables['health_benefits_summary_4'].copy()

------------------------------------

# Rename columns to match health plan format
df = all_tables['health_benefits_summary_5'].copy()  # Make an explicit copy
df.columns = ['Feature', 'HMO Plan', 'Cook County Domestic Tier PPO Plan In-Network', 'PPO Plan In-Network', 'PPO Plan Out-of-Network']

# Remove \n from all cells
for col in df.columns:
    df[col] = df[col].astype(str).str.replace('\n', ' ').str.replace('\\n', ' ')

# Remove the NOTE row
df = df[~df['Feature'].str.contains('NOTE', case=False)]

# Combine column 3 values with column 2 where needed
for idx in df.index:
    if df.loc[idx, 'PPO Plan In-Network'] != '<NA>':
        df.loc[idx, 'Cook County Domestic Tier PPO Plan In-Network'] = (
            f"{df.loc[idx, 'Cook County Domestic Tier PPO Plan In-Network']} {df.loc[idx, 'PPO Plan In-Network']}"
        )

# Find the index for Extended Care
extended_care_index = df[df['Feature'] == 'Extended Care'].index[0]

# Create first dataframe - only rows before Extended Care
cleaned_df5 = df.iloc[:extended_care_index].copy().reset_index(drop=True)

# Create second dataframe - only rows after Extended Care (exclude Extended Care itself)
cleaned_df6 = df.iloc[extended_care_index+1:].copy().reset_index(drop=True)


--------------------------------------------

import pandas as pd

# Main dental information dataframe
df_dental = pd.DataFrame({
    'Item/Procedure': ['Benefit Period Maximum', 'Deductible'],
    'Dental_HMO_Copayment_Member_Pays': ['None', 'None'],
    'Dental_PPO_In_Network': ['$1,500', 
                              '$25 per Individual\n$100 per Family\n(4 individual maximums)\nDeductible does not apply to preventive and orthodontic services'],
    'Dental_PPO_Out_of_Network': ['$1,500', 
                                 '$50 per Individual\n$200 per Family\n(4 individual maximums)\nDeductible does not apply to preventive and orthodontic services']
})

# Preventative services dataframe
df_dental_preventative = pd.DataFrame({
    'Item/Procedure': ['Dental Exams\n(2 exams per benefit period)', 
                      'Prophaxis\n(2 exams per benefit period)', 
                      'Fluoride Treatment\n(2 exams per benefit period)'],
    'Dental_HMO_Copayment_Member_Pays': ['$0', '$0', 'Once every 24 months'],
    'Dental_PPO_In_Network': ['100% of the maximum allowance', '100% of the maximum allowance', '100% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['80% of the maximum allowance', '80% of the maximum allowance', '80% of the maximum allowance']
})

# Primary services dataframe
df_dental_primary_services = pd.DataFrame({
    'Item/Procedure': ['Dental X-Rays', 'Space Maintainers\n(eligible members up to age 19)'],
    'Dental_HMO_Copayment_Member_Pays': ['$0', '$63-$96'],
    'Dental_PPO_In_Network': ['80% of the maximum allowance', '80% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['60% of the maximum allowance', '60% of the maximum allowance']
})

# Restorative services dataframe
df_dental_restorative = pd.DataFrame({
    'Item/Procedure': ['Amalgams and Anterior Resins', 'Posterior Resins', 'Crowns and Fixed Bridges'],
    'Dental_HMO_Copayment_Member_Pays': ['$17-$44', '$53-$105', '$256-$300 per unit'],
    'Dental_PPO_In_Network': ['80% of the maximum allowance', '80% of the maximum allowance', '50% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['60% of the maximum allowance', '60% of the maximum allowance', '50% of the maximum allowance']
})

# Emergency services dataframe
df_dental_emergency_services = pd.DataFrame({
    'Item/Procedure': ['Palliative Emergency Treatment'],
    'Dental_HMO_Copayment_Member_Pays': ['$0'],
    'Dental_PPO_In_Network': ['80% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['80% of the maximum allowance']
})

# Endodontics dataframe
df_dental_endodontics = pd.DataFrame({
    'Item/Procedure': ['Root Canal Therapy'],
    'Dental_HMO_Copayment_Member_Pays': ['$109-$162'],
    'Dental_PPO_In_Network': ['80% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['60% of the maximum allowance']
})

# Periodontics dataframe
df_dental_periodontics = pd.DataFrame({
    'Item/Procedure': ['Scaling and Root Planing', 'Gingivectomy', 'Osseous Surgery'],
    'Dental_HMO_Copayment_Member_Pays': ['$37/quadrant', '$111/quadrant', '$206/quadrant'],
    'Dental_PPO_In_Network': ['80% of the maximum allowance', '80% of the maximum allowance', '80% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['60% of the maximum allowance', '60% of the maximum allowance', '60% of the maximum allowance']
})

# Oral surgery dataframe
df_dental_oral_surgery = pd.DataFrame({
    'Item/Procedure': ['Routine Extractions', 'Removal of Impacted Teeth\n(soft tissue and partial bony)'],
    'Dental_HMO_Copayment_Member_Pays': ['$18-$20', '$50-$65'],
    'Dental_PPO_In_Network': ['80% of the maximum allowance', '80% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['60% of the maximum allowance', '60% of the maximum allowance']
})

# Prosthetics dataframe
df_dental_prosthetics = pd.DataFrame({
    'Item/Procedure': ['Full or Partial Dentures', 'Denture Reline', 'Endosseous Implants'],
    'Dental_HMO_Copayment_Member_Pays': ['$383-$396', '$40-$72', 'Not covered'],
    'Dental_PPO_In_Network': ['50% of the maximum allowance', '50% of the maximum allowance', '50% of the maximum allowance'],
    'Dental_PPO_Out_of_Network': ['50% of the maximum allowance', '50% of the maximum allowance', '50% of the maximum allowance']
})

# Orthodontics dataframe
df_dental_orthodontics = pd.DataFrame({
    'Item/Procedure': ['Adults (19 or older)', 'Dependent Children (up to age 19)', 'Lifetime Maximum'],
    'Dental_HMO_Copayment_Member_Pays': ['Not covered', 
                                       '$3,233-$3,356 not including\nX-rays or orthodontic records', 
                                       'One full course of treatment for\ndependent children under age 19'],
    'Dental_PPO_In_Network': ['50% of the maximum allowance', '50% of the maximum allowance', '$1,250'],
    'Dental_PPO_Out_of_Network': ['50% of the maximum allowance', '50% of the maximum allowance', '$1,250']
})

# Drop the PPO Plan In-Network column from both dataframes
cleaned_df5 = cleaned_df5.drop(columns=['PPO Plan In-Network'])
cleaned_df6 = cleaned_df6.drop(columns=['PPO Plan In-Network'])
