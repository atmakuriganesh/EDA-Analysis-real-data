# Finding percentage of outliers for numerical features
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

def analyze_outliers(df, dataset_name="Dataset"):
    sns.set(style='whitegrid')
    
    numerical_features = df.select_dtypes(include=['float64','int64']).columns
    n_cols = 3
    n_rows= (len(numerical_features)//n_cols)+(1 if len(numerical_features)%n_cols else 0)
    plt.figure(figsize=(20,5*n_rows))
    
    outlier_data = []
    
    for i,col in enumerate(numerical_features,1):
        Q1 = df[col].quantile(.25)
        Q3 = df[col].quantile(.75)
        IQR = Q3 - Q1
        
        # Determine outliers
        outliers_lower = (Q1 - 1.5 * IQR)
        outliers_upper = (Q3 + 1.5 * IQR)
        outliers = df[(df[col] < outliers_lower) | (df[col] > outliers_upper)]
        outlier_count = len(outliers)
        total_count = len(df[col])
        outlier_percentage = (outlier_count/total_count)*100 if total_count >0 else 0
        
        outlier_data.append({
            "Dataset" : dataset_name,
            "column": col,
            "Outlier_Flag": "Y" if outlier_count > 0 else "N",
            "Outlier_Percentage": round(outlier_percentage, 2)
        })
        
        plt.subplot(n_rows,n_cols,i)
        sns.boxplot(x=df[col])
        outlier_count=len(outliers)
        plt.title(f'{dataset_name} - {col} \n Outliers:{outlier_count}')
        plt.xticks(rotation=45)
    
    plt.tight_layout()
    plt.show()
    
    outlier_df = pd.DataFrame(outlier_data)
    
    # Count columns with and without outliers
    columns_with_outliers = sum(outlier_df["Outlier_Flag"] == "Y")
    columns_without_outliers = sum(outlier_df["Outlier_Flag"] == "N")
    
    print(f"\n--- {dataset_name} Summary ---")
    print(f"Total numerical columns: {len(numerical_features)}")
    print(f"Columns with outliers: {columns_with_outliers}")
    print(f"Columns without outliers: {columns_without_outliers}")
    
    return outlier_df

outlier_df_IW = analyze_outliers(df_IW, dataset_name="IW")
outlier_df_OW = analyze_outliers(df_OW, dataset_name="OW")

# Print the detailed outlier information
print(outlier_df_IW)
print(outlier_df_OW)

# Compare both datasets
print("\n--- Comparison Summary ---")
print(f"IW: {sum(outlier_df_IW['Outlier_Flag'] == 'Y')}/{len(outlier_df_IW)} columns have outliers")
print(f"OW: {sum(outlier_df_OW['Outlier_Flag'] == 'Y')}/{len(outlier_df_OW)} columns have outliers")

------------------------------------
def get_numerical_features(df):
    """Extract numerical features (int64 and float64) from dataframe"""
    return df.select_dtypes(include=['int64', 'float64'])

def get_categorical_features(df):
    """Extract categorical features (object type) from dataframe"""
    return df.select_dtypes(include=['object'])

def categorize_features(df_iw, df_ow):
    """
    Categorize features from both internal and external workforce dataframes
    
    Parameters:
    df_iw - Internal workforce dataframe
    df_ow - External workforce dataframe
    
    Returns:
    Dictionary containing all categorized features
    """
    # Process internal workforce data
    numerical_features_df_iw_new = get_numerical_features(df_iw)
    categorical_features_df_iw_new = get_categorical_features(df_iw)
    
    # Process external workforce data
    numerical_features_df_ow_new = get_numerical_features(df_ow)
    categorical_features_df_ow_new = get_categorical_features(df_ow)
    
    return {
        'iw_numerical': numerical_features_df_iw_new,
        'iw_categorical': categorical_features_df_iw_new,
        'ow_numerical': numerical_features_df_ow_new,
        'ow_categorical': categorical_features_df_ow_new
    }
