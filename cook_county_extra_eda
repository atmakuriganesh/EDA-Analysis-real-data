def analyze_salary_structure(df):
    """
    Analyzes salary structure to answer specific questions:
    1. Identify jobs with fixed salaries (equal min and max pay)
    2. Examine relationship between salary level and range
    3. Calculate distribution of jobs across salary tiers
    
    Args:
        df (pandas.DataFrame): DataFrame with job data
    """
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    
    # Ensure we have only rows with salary data
    salary_df = df.dropna(subset=['min_rate', 'max_rate'])
    
    # Calculate average salary and range for each position
    salary_df['avg_salary'] = (salary_df['min_rate'] + salary_df['max_rate']) / 2
    salary_df['salary_range'] = salary_df['max_rate'] - salary_df['min_rate']
    
    # 1. Find jobs with fixed salaries (equal min and max pay)
    fixed_salary_jobs = salary_df[salary_df['salary_range'] == 0].copy()
    
    print("\n===== FIXED SALARY ANALYSIS =====")
    print(f"Total jobs with fixed salaries (min = max): {len(fixed_salary_jobs)}")
    print(f"This represents {(len(fixed_salary_jobs) / len(salary_df) * 100):.2f}% of all jobs with salary data")
    
    if len(fixed_salary_jobs) > 0:
        # Group by job description to count occurrences
        fixed_jobs_count = fixed_salary_jobs.groupby('job_description').size().reset_index(name='count')
        fixed_jobs_salary = fixed_salary_jobs.groupby('job_description')['min_rate'].mean().reset_index(name='fixed_salary')
        fixed_jobs = pd.merge(fixed_jobs_count, fixed_jobs_salary, on='job_description')
        fixed_jobs = fixed_jobs.sort_values('fixed_salary', ascending=False)
        
        print("\nTop 10 fixed-salary jobs:")
        for i, row in fixed_jobs.head(10).iterrows():
            print(f"- {row['job_description']}: ${row['fixed_salary']:,.2f} ({row['count']} positions)")
        
        # Create visualization of fixed salary jobs
        plt.figure(figsize=(12, 8))
        top_fixed_jobs = fixed_jobs.head(15)
        bars = sns.barplot(y='job_description', x='fixed_salary', data=top_fixed_jobs)
        
        # Add count annotations
        for i, bar in enumerate(bars.patches):
            bars.text(bar.get_width() + 1000, 
                    bar.get_y() + bar.get_height()/2, 
                    f"n={top_fixed_jobs.iloc[i]['count']}", 
                    ha='left', va='center')
        
        plt.title('Top 15 Jobs with Fixed Salaries')
        plt.xlabel('Fixed Salary ($)')
        plt.ylabel('Job Title')
        plt.tight_layout()
        plt.savefig('fixed_salary_jobs.png')
    
    # 2. Analyze relationship between salary level and range
    # Calculate relative range as percentage of average salary
    salary_df['relative_range_pct'] = (salary_df['salary_range'] / salary_df['avg_salary']) * 100
    
    # Create scatter plot of average salary vs salary range
    plt.figure(figsize=(12, 8))
    scatter = plt.scatter(salary_df['avg_salary'], 
                         salary_df['salary_range'],
                         alpha=0.5, 
                         c=salary_df['relative_range_pct'],
                         cmap='viridis')
    
    plt.colorbar(scatter, label='Relative Range (%)')
    plt.title('Relationship Between Salary Level and Range')
    plt.xlabel('Average Salary ($)')
    plt.ylabel('Salary Range ($)')
    
    # Add trend line
    from scipy import stats
    slope, intercept, r_value, p_value, std_err = stats.linregress(salary_df['avg_salary'], 
                                                                  salary_df['salary_range'])
    x = np.array([salary_df['avg_salary'].min(), salary_df['avg_salary'].max()])
    y = intercept + slope * x
    plt.plot(x, y, 'r--', label=f'Trend line (r={r_value:.2f})')
    
    plt.legend()
    plt.tight_layout()
    plt.savefig('salary_level_vs_range.png')
    
    # Analyze correlation
    correlation = salary_df['avg_salary'].corr(salary_df['salary_range'])
    
    print("\n===== SALARY LEVEL VS RANGE ANALYSIS =====")
    print(f"Correlation between salary level and range: {correlation:.4f}")
    if correlation > 0.5:
        print("Strong positive correlation: Higher-paying jobs tend to have wider salary ranges")
    elif correlation > 0.3:
        print("Moderate positive correlation: Higher-paying jobs tend to have somewhat wider salary ranges")
    elif correlation > 0:
        print("Weak positive correlation: Higher-paying jobs have slightly wider salary ranges")
    elif correlation > -0.3:
        print("Weak negative correlation: Higher-paying jobs have slightly narrower salary ranges")
    else:
        print("Moderate to strong negative correlation: Higher-paying jobs have narrower salary ranges")
    
    # Group by average salary rounded to nearest 10k and calculate average range
    salary_df['salary_group'] = (salary_df['avg_salary'] // 10000) * 10000
    group_ranges = salary_df.groupby('salary_group').agg({
        'salary_range': 'mean',
        'relative_range_pct': 'mean',
        'job_description': 'count'
    }).reset_index()
    
    group_ranges.columns = ['salary_group', 'avg_range', 'avg_relative_range', 'job_count']
    
    print("\nSalary ranges by salary level:")
    for i, row in group_ranges.iterrows():
        print(f"- ${row['salary_group']:,.0f}: Avg range ${row['avg_range']:,.2f} ({row['avg_relative_range']:.1f}% of salary), {row['job_count']} jobs")
    
    # 3. Calculate distribution of jobs across salary tiers
    # Define salary tiers
    bins = [0, 50000, 100000, float('inf')]
    labels = ['<$50k', '$50k-$100k', '>$100k']
    
    salary_df['salary_tier'] = pd.cut(salary_df['avg_salary'], bins=bins, labels=labels)
    
    # Count jobs in each tier
    tier_counts = salary_df['salary_tier'].value_counts().reset_index()
    tier_counts.columns = ['Salary Tier', 'Count']
    
    # Calculate percentages
    tier_counts['Percentage'] = tier_counts['Count'] / tier_counts['Count'].sum() * 100
    
    # Sort by tier order
    tier_order = {label: i for i, label in enumerate(labels)}
    tier_counts['order'] = tier_counts['Salary Tier'].map(tier_order)
    tier_counts = tier_counts.sort_values('order').drop('order', axis=1)
    
    # Create visualization of salary tiers
    plt.figure(figsize=(10, 6))
    ax = sns.barplot(x='Salary Tier', y='Count', data=tier_counts)
    
    # Add percentage annotations
    for i, p in enumerate(ax.patches):
        ax.annotate(f"{tier_counts.iloc[i]['Percentage']:.1f}%", 
                   (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='bottom')
    
    plt.title('Distribution of Jobs Across Salary Tiers')
    plt.tight_layout()
    plt.savefig('salary_tier_distribution.png')
    
    print("\n===== SALARY TIER DISTRIBUTION =====")
    for i, row in tier_counts.iterrows():
        print(f"- {row['Salary Tier']}: {row['Count']} jobs ({row['Percentage']:.1f}%)")
    
    # Additional analysis: Top 5 jobs in each salary tier
    print("\nTop jobs in each salary tier:")
    for tier in labels:
        tier_jobs = salary_df[salary_df['salary_tier'] == tier]
        job_counts = tier_jobs.groupby('job_description').size().reset_index(name='count')
        job_salary = tier_jobs.groupby('job_description')['avg_salary'].mean().reset_index(name='avg_salary')
        top_jobs = pd.merge(job_counts, job_salary, on='job_description')
        top_jobs = top_jobs.sort_values('count', ascending=False).head(5)
        
        print(f"\n{tier} tier top jobs:")
        for i, row in top_jobs.iterrows():
            print(f"- {row['job_description']}: ${row['avg_salary']:,.2f} ({row['count']} positions)")





The majority of jobs (61.1%) fall within the middle salary tier ($50k-$100k), while a substantial portion (37%) earn over $100k. Only a tiny fraction (1.9%) earn less than $50k, suggesting this dataset represents a relatively well-compensated workforce.
