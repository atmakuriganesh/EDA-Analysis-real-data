def compare_top_grades_salary(df, n=15):
    """
    Compare salaries across the top 15 grades based on different metrics.
    
    Args:
        df (pandas.DataFrame): DataFrame with job data
        n (int): Number of top grades to analyze (default: 15)
        
    Returns:
        pandas.DataFrame: DataFrame containing salary comparison for top grades
    """
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    from matplotlib.gridspec import GridSpec
    
    # Ensure we have only rows with salary and grade data
    salary_df = df.dropna(subset=['min_rate', 'max_rate', 'grade'])
    
    # Calculate average salary for each position
    salary_df['avg_salary'] = (salary_df['min_rate'] + salary_df['max_rate']) / 2
    
    # Calculate overall average for comparison
    overall_avg_salary = salary_df['avg_salary'].mean()
    
    # Group by grade and calculate statistics
    grade_salary = salary_df.groupby('grade').agg({
        'avg_salary': ['mean', 'median', 'min', 'max', 'std', 'count'],
        'min_rate': 'mean',
        'max_rate': 'mean'
    }).reset_index()
    
    # Flatten multi-index columns
    grade_salary.columns = ['_'.join(col).strip('_') for col in grade_salary.columns.values]
    grade_salary.rename(columns={'grade_': 'grade', 'avg_salary_count': 'position_count'}, inplace=True)
    
    # Calculate salary range and coefficient of variation
    grade_salary['salary_range'] = grade_salary['avg_salary_max'] - grade_salary['avg_salary_min']
    grade_salary['coefficient_of_variation'] = grade_salary['avg_salary_std'] / grade_salary['avg_salary_mean'] * 100
    
    # Calculate percentage difference from overall average
    grade_salary['pct_diff_from_avg'] = ((grade_salary['avg_salary_mean'] - overall_avg_salary) / 
                                        overall_avg_salary * 100)
    
    # Get the top N grades by:
    # 1. Average salary
    top_by_salary = grade_salary.sort_values('avg_salary_mean', ascending=False).head(n)
    
    # 2. Position count
    top_by_count = grade_salary.sort_values('position_count', ascending=False).head(n)
    
    # 3. Salary range (max variation within grade)
    top_by_range = grade_salary.sort_values('salary_range', ascending=False).head(n)
    
    # 4. Most different from average (absolute percentage)
    grade_salary['abs_pct_diff'] = grade_salary['pct_diff_from_avg'].abs()
    top_by_diff = grade_salary.sort_values('abs_pct_diff', ascending=False).head(n)
    
    # Create visualization
    plt.figure(figsize=(20, 15))
    gs = GridSpec(2, 2, figure=plt.gcf())
    
    # 1. Top grades by average salary
    ax1 = plt.subplot(gs[0, 0])
    bars = sns.barplot(x='avg_salary_mean', y='grade', data=top_by_salary.head(n), ax=ax1)
    
    # Add position count annotations
    for i, bar in enumerate(bars.patches):
        bars.text(bar.get_width() + 1000, 
                 bar.get_y() + bar.get_height()/2, 
                 f"n={top_by_salary.iloc[i]['position_count']}", 
                 ha='left', va='center')
    
    ax1.axvline(x=overall_avg_salary, color='red', linestyle='--', 
               label=f'Overall Average: ${overall_avg_salary:.2f}')
    ax1.set_title('Top 15 Grades by Average Salary')
    ax1.set_xlabel('Average Salary ($)')
    ax1.set_ylabel('Grade')
    ax1.legend()
    
    # 2. Top grades by position count
    ax2 = plt.subplot(gs[0, 1])
    bars = sns.barplot(x='position_count', y='grade', data=top_by_count.head(n), ax=ax2)
    
    # Add salary annotations
    for i, bar in enumerate(bars.patches):
        bars.text(bar.get_width() + 1, 
                 bar.get_y() + bar.get_height()/2, 
                 f"${top_by_count.iloc[i]['avg_salary_mean']:.0f}", 
                 ha='left', va='center')
    
    ax2.set_title('Top 15 Grades by Position Count')
    ax2.set_xlabel('Number of Positions')
    ax2.set_ylabel('Grade')
    
    # 3. Box plot of salary distribution by grade
    ax3 = plt.subplot(gs[1, 0])
    # Need to get the raw data for boxplot
    top_grades_list = top_by_salary['grade'].tolist()
    boxplot_data = salary_df[salary_df['grade'].isin(top_grades_list)]
    
    sns.boxplot(x='grade', y='avg_salary', data=boxplot_data, 
               order=top_by_salary['grade'].tolist(), 
               ax=ax3)
    ax3.axhline(y=overall_avg_salary, color='red', linestyle='--', 
               label=f'Overall Average: ${overall_avg_salary:.2f}')
    ax3.set_title('Salary Distribution for Top 15 Grades')
    ax3.set_xlabel('Grade')
    ax3.set_ylabel('Average Salary ($)')
    ax3.set_xticklabels(ax3.get_xticklabels(), rotation=45)
    ax3.legend()
    
    # 4. Percentage difference from average
    ax4 = plt.subplot(gs[1, 1])
    bars = sns.barplot(y='grade', x='pct_diff_from_avg', data=top_by_diff.head(n), ax=ax4)
    
    # Color bars based on above/below average
    for i, bar in enumerate(bars.patches):
        if top_by_diff.iloc[i]['pct_diff_from_avg'] > 0:
            bar.set_facecolor('green')
        else:
            bar.set_facecolor('red')
    
    ax4.axvline(x=0, color='black', linestyle='-')
    ax4.set_title('Top 15 Grades by Percentage Difference from Average')
    ax4.set_xlabel('Percentage Difference from Average (%)')
    ax4.set_ylabel('Grade')
    
    plt.tight_layout()
    plt.savefig('top_grades_salary_comparison.png')
    
    # Calculate summary statistics for reporting
    above_avg_grades = len(grade_salary[grade_salary['pct_diff_from_avg'] > 0])
    below_avg_grades = len(grade_salary[grade_salary['pct_diff_from_avg'] <= 0])
    highest_grade = grade_salary.iloc[grade_salary['avg_salary_mean'].idxmax()]
    lowest_grade = grade_salary.iloc[grade_salary['avg_salary_mean'].idxmin()]
    most_common_grade = grade_salary.iloc[grade_salary['position_count'].idxmax()]
    
    # Print summary
    print("\n===== GRADE SALARY COMPARISON =====")
    print(f"Total unique grades: {len(grade_salary)}")
    print(f"Overall average salary: ${overall_avg_salary:.2f}")
    print(f"Grades above average: {above_avg_grades}")
    print(f"Grades below average: {below_avg_grades}")
    
    print(f"\nHighest paying grade: {highest_grade['grade']} (${highest_grade['avg_salary_mean']:.2f})")
    print(f"- {highest_grade['position_count']} positions")
    print(f"- {highest_grade['pct_diff_from_avg']:.1f}% above overall average")
    
    print(f"\nLowest paying grade: {lowest_grade['grade']} (${lowest_grade['avg_salary_mean']:.2f})")
    print(f"- {lowest_grade['position_count']} positions")
    print(f"- {lowest_grade['pct_diff_from_avg']:.1f}% below overall average")
    
    print(f"\nMost common grade: {most_common_grade['grade']} ({most_common_grade['position_count']} positions)")
    print(f"- Average salary: ${most_common_grade['avg_salary_mean']:.2f}")
    print(f"- {most_common_grade['pct_diff_from_avg']:.1f}% difference from overall average")
    
    # Return the full grade salary data
    return {
        'grade_salary_data': grade_salary,
        'top_by_salary': top_by_salary,
        'top_by_count': top_by_count,
        'top_by_range': top_by_range,
        'top_by_diff': top_by_diff,
        'overall_avg_salary': overall_avg_salary
    }
